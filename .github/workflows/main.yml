name: YouTube Monitor and Summary

on:
  schedule:
    - cron: "0 */3 * * *" # Ogni 3 ore
  workflow_dispatch: # Permette di avviare il workflow manualmente

jobs:
  run-monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # üîπ Scarica l'ultimo database se esiste, ma non fallisce se non c'√®
      - name: Check for existing SQLite Database
        id: check-artifact
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: channel-state-db
          path: .

      # üîπ Verifica il contenuto del database SQLite
      - name: Debug SQLite Database
        run: |
          if [ -f channel_state.db ]; then
            echo "‚úÖ Database trovato. Contenuto attuale:"
            sqlite3 channel_state.db "SELECT * FROM video_state;" || echo "‚ö†Ô∏è Errore nel leggere il database"
          else
            echo "‚ö†Ô∏è Nessun database trovato. Verr√† creato uno nuovo."
          fi

      # üîπ Se il database non esiste o √® corrotto, lo rigenera
      - name: Create SQLite Database if not found
        run: |
          if [ ! -f channel_state.db ]; then
            echo "‚ö†Ô∏è Creazione di un nuovo database SQLite..."
            sqlite3 channel_state.db "CREATE TABLE IF NOT EXISTS video_state (channel_id TEXT PRIMARY KEY, last_video_id TEXT);"
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run script
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID_DEV }}
          GENAI_API_KEY: ${{ secrets.GENAI_API_KEY }}
        run: python video_monitor.py

      - name: Save SQLite Database
        uses: actions/upload-artifact@v4
        with:
          name: channel-state-db
          path: channel_state.db
